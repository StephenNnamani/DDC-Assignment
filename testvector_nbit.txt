#basically tests of arithmetic and logic unit together
S2 S1 S0 C_in A3 A2 A1 A0 B3 B2 B1 B0 G3 G2 G1 G0 C_out

#arithmetic: 
# A transfer (1)
0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0
0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1 0
0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0
0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0
#increment
0 0 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0
0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 1
0 0 0 1 0 0 1 1 0 0 0 0 0 1 0 0 0
0 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 1
#add
0 0 1 0 1 0 1 0 0 1 0 1 1 1 1 1 0 # 10 + 5 = 15
0 0 1 0 1 0 1 0 0 0 1 1 1 1 0 1 0 # 10 + 3 = 13
0 0 1 0 0 1 1 0 0 1 1 0 1 1 0 0 0 # 6 + 6 = 12
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 # 0...
0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 # 15 + 15 = 14 + carry over
# add +1 (all tests from add)
0 0 1 1 1 0 1 0 0 1 0 1 0 0 0 0 1 # 10 + 5 +1 = 0 + carry over
0 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 # 10 + 3 +1 = 14
0 0 1 1 0 1 1 0 0 1 1 0 1 1 0 1 0 # 6 + 6 +1 = 13
0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 # 0 +1 = 1
0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 # 15 + 15 +1 = 15 + carry over
# subtract (A + -B + 1)
# (positive numbers: always carry over active)
# (negative numbers in 1-komplement layout without carry over)
0 1 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 # 10 - 5 = 5
0 1 0 1 1 0 1 0 0 0 1 1 0 1 1 1 1 # 10 - 3 = 7
0 1 0 1 0 1 1 0 0 1 1 0 0 0 0 0 1 # 6 - 6 = 0
0 1 0 1 1 1 1 1 1 1 1 1 0 0 0 0 1 # 15 - 15 = 0
0 1 0 1 0 0 0 0 0 0 0 1 1 1 1 1 0 # -1
0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 1 0 # 5 - 10 = -5
0 1 0 1 0 1 1 1 1 1 1 1 1 0 0 0 0 # 7 - 15 = -8
# A + -B (subtraction -1 )
0 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 1 # 10 - 5 = 5-1 = 4
0 1 0 0 1 0 1 0 0 0 1 1 0 1 1 0 1 # 10 - 3 = 7-1 = 6
0 1 0 0 0 1 1 0 0 1 1 0 1 1 1 1 0 # 6 - 6 = 0-1 = -1
0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 # 15 - 15 = 0-1 = -1
0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 # -1-1 = -2
0 1 0 0 0 1 0 1 1 0 1 0 1 0 1 0 0 # 5 - 10 = -5-1 = -6
0 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 # 7 - 15 = -8-1 = -9
# decrement
# carry over: 1 => positive number; 0=> negative number
0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 1 1
0 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 1
0 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0
0 1 1 0 0 1 1 0 0 0 0 0 0 1 0 1 1
0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 
#transfer (2)
# carry over: 1 => positive number
0 1 1 1 1 0 1 0 0 0 0 0 1 0 1 0 1
0 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1
0 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

#logic:
#(x = donÂ´t care)
# AND
1 0 0 0 1 0 1 0 1 1 0 0 1 0 0 0 x
1 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 x
1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 x
1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 x
1 0 0 0 0 0 1 1 0 1 0 1 0 0 0 1 x
1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 x
1 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 x
# OR
1 0 1 0 1 0 1 1 0 0 0 1 1 0 1 1 x
1 0 1 0 0 1 0 1 1 0 0 1 1 1 0 1 x
1 0 1 0 1 1 1 0 1 0 0 0 1 1 1 0 x
1 0 1 0 1 1 0 0 1 1 0 1 1 1 0 1 x
# XOR
1 1 0 0 1 0 0 0 0 1 1 0 1 1 1 0 x
1 1 0 0 1 0 1 0 1 0 0 1 0 0 1 1 x
1 1 0 0 1 1 1 0 0 0 0 0 1 1 1 0 x
1 1 0 0 0 1 0 0 1 0 0 1 1 1 0 1 x
# NOT A 
1 1 1 0 1 1 0 0 0 0 0 1 0 0 1 1 x
1 1 1 0 1 0 0 1 1 0 1 1 0 1 1 0 x
1 1 1 0 1 0 1 0 1 1 0 1 0 1 0 1 x
1 1 1 0 0 1 1 0 0 0 1 0 1 0 0 1 x
1 1 1 0 0 1 1 1 1 0 0 1 1 0 0 0 x
#same with C_in = 1:
# AND
1 0 0 1 1 0 1 0 1 1 0 0 1 0 0 0 x
1 0 0 1 0 1 1 1 1 1 1 1 0 1 1 1 x
1 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 x
1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 x
1 0 0 1 0 0 1 1 0 1 0 1 0 0 0 1 x
1 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 x
1 0 0 1 1 1 0 1 0 1 0 0 0 1 0 0 x
# OR
1 0 1 1 1 0 1 1 0 0 0 1 1 0 1 1 x
1 0 1 1 0 1 0 1 1 0 0 1 1 1 0 1 x
1 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 x
1 0 1 1 1 1 0 0 1 1 0 1 1 1 0 1 x
# XOR
1 1 0 1 1 0 0 0 0 1 1 0 1 1 1 0 x
1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 x
1 1 0 1 1 1 1 0 0 0 0 0 1 1 1 0 x
1 1 0 1 0 1 0 0 1 0 0 1 1 1 0 1 x
# NOT A 
1 1 1 1 1 1 0 0 0 0 0 1 0 0 1 1 x
1 1 1 1 1 0 0 1 1 0 1 1 0 1 1 0 x
1 1 1 1 1 0 1 0 1 1 0 1 0 1 0 1 x
1 1 1 1 0 1 1 0 0 0 1 0 1 0 0 1 x
1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 x